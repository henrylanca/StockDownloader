#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StockData")]
	public partial class StockDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStockSymbol(StockSymbol instance);
    partial void UpdateStockSymbol(StockSymbol instance);
    partial void DeleteStockSymbol(StockSymbol instance);
    partial void InsertStockPeak(StockPeak instance);
    partial void UpdateStockPeak(StockPeak instance);
    partial void DeleteStockPeak(StockPeak instance);
    partial void InsertStockPick(StockPick instance);
    partial void UpdateStockPick(StockPick instance);
    partial void DeleteStockPick(StockPick instance);
    partial void InsertStockInformation(StockInformation instance);
    partial void UpdateStockInformation(StockInformation instance);
    partial void DeleteStockInformation(StockInformation instance);
    partial void InsertTradingGame_StockPerformance(TradingGame_StockPerformance instance);
    partial void UpdateTradingGame_StockPerformance(TradingGame_StockPerformance instance);
    partial void DeleteTradingGame_StockPerformance(TradingGame_StockPerformance instance);
    partial void InsertStockQuote(StockQuote instance);
    partial void UpdateStockQuote(StockQuote instance);
    partial void DeleteStockQuote(StockQuote instance);
    #endregion
		
		public StockDBDataContext() : 
				base(global::DBModel.Properties.Settings.Default.StockDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StockDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StockDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<StockSymbol> StockSymbols
		{
			get
			{
				return this.GetTable<StockSymbol>();
			}
		}
		
		public System.Data.Linq.Table<StockPeak> StockPeaks
		{
			get
			{
				return this.GetTable<StockPeak>();
			}
		}
		
		public System.Data.Linq.Table<StockPick> StockPicks
		{
			get
			{
				return this.GetTable<StockPick>();
			}
		}
		
		public System.Data.Linq.Table<StockInformation> StockInformations
		{
			get
			{
				return this.GetTable<StockInformation>();
			}
		}
		
		public System.Data.Linq.Table<TradingGame_StockPerformance> TradingGame_StockPerformances
		{
			get
			{
				return this.GetTable<TradingGame_StockPerformance>();
			}
		}
		
		public System.Data.Linq.Table<StockQuote> StockQuotes
		{
			get
			{
				return this.GetTable<StockQuote>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockSymbol")]
	public partial class StockSymbol : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Symbol;
		
		private string _StockName;
		
		private string _Sector;
		
		private string _Country;
		
		private System.Nullable<int> _ETF;
		
		private System.Nullable<bool> _HasFuture;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntitySet<StockPeak> _StockPeaks;
		
		private EntitySet<StockPick> _StockPicks;
		
		private EntityRef<StockInformation> _StockInformation;
		
		private EntitySet<TradingGame_StockPerformance> _TradingGame_StockPerformances;
		
		private EntitySet<StockQuote> _StockQuotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnStockNameChanging(string value);
    partial void OnStockNameChanged();
    partial void OnSectorChanging(string value);
    partial void OnSectorChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnETFChanging(System.Nullable<int> value);
    partial void OnETFChanged();
    partial void OnHasFutureChanging(System.Nullable<bool> value);
    partial void OnHasFutureChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public StockSymbol()
		{
			this._StockPeaks = new EntitySet<StockPeak>(new Action<StockPeak>(this.attach_StockPeaks), new Action<StockPeak>(this.detach_StockPeaks));
			this._StockPicks = new EntitySet<StockPick>(new Action<StockPick>(this.attach_StockPicks), new Action<StockPick>(this.detach_StockPicks));
			this._StockInformation = default(EntityRef<StockInformation>);
			this._TradingGame_StockPerformances = new EntitySet<TradingGame_StockPerformance>(new Action<TradingGame_StockPerformance>(this.attach_TradingGame_StockPerformances), new Action<TradingGame_StockPerformance>(this.detach_TradingGame_StockPerformances));
			this._StockQuotes = new EntitySet<StockQuote>(new Action<StockQuote>(this.attach_StockQuotes), new Action<StockQuote>(this.detach_StockQuotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string StockName
		{
			get
			{
				return this._StockName;
			}
			set
			{
				if ((this._StockName != value))
				{
					this.OnStockNameChanging(value);
					this.SendPropertyChanging();
					this._StockName = value;
					this.SendPropertyChanged("StockName");
					this.OnStockNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sector", DbType="VarChar(100)")]
		public string Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ETF", DbType="Int")]
		public System.Nullable<int> ETF
		{
			get
			{
				return this._ETF;
			}
			set
			{
				if ((this._ETF != value))
				{
					this.OnETFChanging(value);
					this.SendPropertyChanging();
					this._ETF = value;
					this.SendPropertyChanged("ETF");
					this.OnETFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasFuture", DbType="Bit")]
		public System.Nullable<bool> HasFuture
		{
			get
			{
				return this._HasFuture;
			}
			set
			{
				if ((this._HasFuture != value))
				{
					this.OnHasFutureChanging(value);
					this.SendPropertyChanging();
					this._HasFuture = value;
					this.SendPropertyChanged("HasFuture");
					this.OnHasFutureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockPeak", Storage="_StockPeaks", ThisKey="Symbol", OtherKey="Symbol")]
		public EntitySet<StockPeak> StockPeaks
		{
			get
			{
				return this._StockPeaks;
			}
			set
			{
				this._StockPeaks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockPick", Storage="_StockPicks", ThisKey="Symbol", OtherKey="Symbol")]
		public EntitySet<StockPick> StockPicks
		{
			get
			{
				return this._StockPicks;
			}
			set
			{
				this._StockPicks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockInformation", Storage="_StockInformation", ThisKey="Symbol", OtherKey="Symbol", IsUnique=true, IsForeignKey=false)]
		public StockInformation StockInformation
		{
			get
			{
				return this._StockInformation.Entity;
			}
			set
			{
				StockInformation previousValue = this._StockInformation.Entity;
				if (((previousValue != value) 
							|| (this._StockInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockInformation.Entity = null;
						previousValue.StockSymbol = null;
					}
					this._StockInformation.Entity = value;
					if ((value != null))
					{
						value.StockSymbol = this;
					}
					this.SendPropertyChanged("StockInformation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_TradingGame_StockPerformance", Storage="_TradingGame_StockPerformances", ThisKey="Symbol", OtherKey="Symbol")]
		public EntitySet<TradingGame_StockPerformance> TradingGame_StockPerformances
		{
			get
			{
				return this._TradingGame_StockPerformances;
			}
			set
			{
				this._TradingGame_StockPerformances.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockQuote", Storage="_StockQuotes", ThisKey="Symbol", OtherKey="Symbol")]
		public EntitySet<StockQuote> StockQuotes
		{
			get
			{
				return this._StockQuotes;
			}
			set
			{
				this._StockQuotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockPeaks(StockPeak entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = this;
		}
		
		private void detach_StockPeaks(StockPeak entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = null;
		}
		
		private void attach_StockPicks(StockPick entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = this;
		}
		
		private void detach_StockPicks(StockPick entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = null;
		}
		
		private void attach_TradingGame_StockPerformances(TradingGame_StockPerformance entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = this;
		}
		
		private void detach_TradingGame_StockPerformances(TradingGame_StockPerformance entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = null;
		}
		
		private void attach_StockQuotes(StockQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = this;
		}
		
		private void detach_StockQuotes(StockQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockSymbol = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockPeak")]
	public partial class StockPeak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockPeakID;
		
		private string _Symbol;
		
		private System.DateTime _PeakDate;
		
		private int _PeakType;
		
		private short _TimeFrame;
		
		private EntityRef<StockSymbol> _StockSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockPeakIDChanging(int value);
    partial void OnStockPeakIDChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnPeakDateChanging(System.DateTime value);
    partial void OnPeakDateChanged();
    partial void OnPeakTypeChanging(int value);
    partial void OnPeakTypeChanged();
    partial void OnTimeFrameChanging(short value);
    partial void OnTimeFrameChanged();
    #endregion
		
		public StockPeak()
		{
			this._StockSymbol = default(EntityRef<StockSymbol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockPeakID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockPeakID
		{
			get
			{
				return this._StockPeakID;
			}
			set
			{
				if ((this._StockPeakID != value))
				{
					this.OnStockPeakIDChanging(value);
					this.SendPropertyChanging();
					this._StockPeakID = value;
					this.SendPropertyChanged("StockPeakID");
					this.OnStockPeakIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					if (this._StockSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PeakDate
		{
			get
			{
				return this._PeakDate;
			}
			set
			{
				if ((this._PeakDate != value))
				{
					this.OnPeakDateChanging(value);
					this.SendPropertyChanging();
					this._PeakDate = value;
					this.SendPropertyChanged("PeakDate");
					this.OnPeakDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeakType", DbType="Int NOT NULL")]
		public int PeakType
		{
			get
			{
				return this._PeakType;
			}
			set
			{
				if ((this._PeakType != value))
				{
					this.OnPeakTypeChanging(value);
					this.SendPropertyChanging();
					this._PeakType = value;
					this.SendPropertyChanged("PeakType");
					this.OnPeakTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFrame", DbType="SmallInt NOT NULL")]
		public short TimeFrame
		{
			get
			{
				return this._TimeFrame;
			}
			set
			{
				if ((this._TimeFrame != value))
				{
					this.OnTimeFrameChanging(value);
					this.SendPropertyChanging();
					this._TimeFrame = value;
					this.SendPropertyChanged("TimeFrame");
					this.OnTimeFrameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockPeak", Storage="_StockSymbol", ThisKey="Symbol", OtherKey="Symbol", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StockSymbol StockSymbol
		{
			get
			{
				return this._StockSymbol.Entity;
			}
			set
			{
				StockSymbol previousValue = this._StockSymbol.Entity;
				if (((previousValue != value) 
							|| (this._StockSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockSymbol.Entity = null;
						previousValue.StockPeaks.Remove(this);
					}
					this._StockSymbol.Entity = value;
					if ((value != null))
					{
						value.StockPeaks.Add(this);
						this._Symbol = value.Symbol;
					}
					else
					{
						this._Symbol = default(string);
					}
					this.SendPropertyChanged("StockSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockPick")]
	public partial class StockPick : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Symbol;
		
		private System.DateTime _PickDate;
		
		private short _PickType;
		
		private string _PickKey;
		
		private EntityRef<StockSymbol> _StockSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnPickDateChanging(System.DateTime value);
    partial void OnPickDateChanged();
    partial void OnPickTypeChanging(short value);
    partial void OnPickTypeChanged();
    partial void OnPickKeyChanging(string value);
    partial void OnPickKeyChanged();
    #endregion
		
		public StockPick()
		{
			this._StockSymbol = default(EntityRef<StockSymbol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					if (this._StockSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PickDate
		{
			get
			{
				return this._PickDate;
			}
			set
			{
				if ((this._PickDate != value))
				{
					this.OnPickDateChanging(value);
					this.SendPropertyChanging();
					this._PickDate = value;
					this.SendPropertyChanged("PickDate");
					this.OnPickDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickType", DbType="SmallInt NOT NULL")]
		public short PickType
		{
			get
			{
				return this._PickType;
			}
			set
			{
				if ((this._PickType != value))
				{
					this.OnPickTypeChanging(value);
					this.SendPropertyChanging();
					this._PickType = value;
					this.SendPropertyChanged("PickType");
					this.OnPickTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickKey", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PickKey
		{
			get
			{
				return this._PickKey;
			}
			set
			{
				if ((this._PickKey != value))
				{
					this.OnPickKeyChanging(value);
					this.SendPropertyChanging();
					this._PickKey = value;
					this.SendPropertyChanged("PickKey");
					this.OnPickKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockPick", Storage="_StockSymbol", ThisKey="Symbol", OtherKey="Symbol", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StockSymbol StockSymbol
		{
			get
			{
				return this._StockSymbol.Entity;
			}
			set
			{
				StockSymbol previousValue = this._StockSymbol.Entity;
				if (((previousValue != value) 
							|| (this._StockSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockSymbol.Entity = null;
						previousValue.StockPicks.Remove(this);
					}
					this._StockSymbol.Entity = value;
					if ((value != null))
					{
						value.StockPicks.Add(this);
						this._Symbol = value.Symbol;
					}
					else
					{
						this._Symbol = default(string);
					}
					this.SendPropertyChanged("StockSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockInformation")]
	public partial class StockInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Symbol;
		
		private System.Nullable<decimal> _Divident;
		
		private System.Nullable<decimal> _MarKetCap;
		
		private System.Nullable<decimal> _PriceSales;
		
		private System.Nullable<decimal> _PriceBooks;
		
		private System.Nullable<decimal> _PE;
		
		private System.Nullable<System.DateTime> _DivedentPayDay;
		
		private System.Nullable<decimal> _PEG;
		
		private System.Nullable<decimal> _ShortRatio;
		
		private System.Nullable<decimal> _DividentYield;
		
		private System.Nullable<int> _AvgVolume;
		
		private EntityRef<StockSymbol> _StockSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnDividentChanging(System.Nullable<decimal> value);
    partial void OnDividentChanged();
    partial void OnMarKetCapChanging(System.Nullable<decimal> value);
    partial void OnMarKetCapChanged();
    partial void OnPriceSalesChanging(System.Nullable<decimal> value);
    partial void OnPriceSalesChanged();
    partial void OnPriceBooksChanging(System.Nullable<decimal> value);
    partial void OnPriceBooksChanged();
    partial void OnPEChanging(System.Nullable<decimal> value);
    partial void OnPEChanged();
    partial void OnDivedentPayDayChanging(System.Nullable<System.DateTime> value);
    partial void OnDivedentPayDayChanged();
    partial void OnPEGChanging(System.Nullable<decimal> value);
    partial void OnPEGChanged();
    partial void OnShortRatioChanging(System.Nullable<decimal> value);
    partial void OnShortRatioChanged();
    partial void OnDividentYieldChanging(System.Nullable<decimal> value);
    partial void OnDividentYieldChanged();
    partial void OnAvgVolumeChanging(System.Nullable<int> value);
    partial void OnAvgVolumeChanged();
    #endregion
		
		public StockInformation()
		{
			this._StockSymbol = default(EntityRef<StockSymbol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					if (this._StockSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Divident", DbType="Money")]
		public System.Nullable<decimal> Divident
		{
			get
			{
				return this._Divident;
			}
			set
			{
				if ((this._Divident != value))
				{
					this.OnDividentChanging(value);
					this.SendPropertyChanging();
					this._Divident = value;
					this.SendPropertyChanged("Divident");
					this.OnDividentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarKetCap", DbType="Money")]
		public System.Nullable<decimal> MarKetCap
		{
			get
			{
				return this._MarKetCap;
			}
			set
			{
				if ((this._MarKetCap != value))
				{
					this.OnMarKetCapChanging(value);
					this.SendPropertyChanging();
					this._MarKetCap = value;
					this.SendPropertyChanged("MarKetCap");
					this.OnMarKetCapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceSales", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> PriceSales
		{
			get
			{
				return this._PriceSales;
			}
			set
			{
				if ((this._PriceSales != value))
				{
					this.OnPriceSalesChanging(value);
					this.SendPropertyChanging();
					this._PriceSales = value;
					this.SendPropertyChanged("PriceSales");
					this.OnPriceSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceBooks", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> PriceBooks
		{
			get
			{
				return this._PriceBooks;
			}
			set
			{
				if ((this._PriceBooks != value))
				{
					this.OnPriceBooksChanging(value);
					this.SendPropertyChanging();
					this._PriceBooks = value;
					this.SendPropertyChanged("PriceBooks");
					this.OnPriceBooksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PE", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> PE
		{
			get
			{
				return this._PE;
			}
			set
			{
				if ((this._PE != value))
				{
					this.OnPEChanging(value);
					this.SendPropertyChanging();
					this._PE = value;
					this.SendPropertyChanged("PE");
					this.OnPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivedentPayDay", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DivedentPayDay
		{
			get
			{
				return this._DivedentPayDay;
			}
			set
			{
				if ((this._DivedentPayDay != value))
				{
					this.OnDivedentPayDayChanging(value);
					this.SendPropertyChanging();
					this._DivedentPayDay = value;
					this.SendPropertyChanged("DivedentPayDay");
					this.OnDivedentPayDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PEG", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> PEG
		{
			get
			{
				return this._PEG;
			}
			set
			{
				if ((this._PEG != value))
				{
					this.OnPEGChanging(value);
					this.SendPropertyChanging();
					this._PEG = value;
					this.SendPropertyChanged("PEG");
					this.OnPEGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortRatio", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> ShortRatio
		{
			get
			{
				return this._ShortRatio;
			}
			set
			{
				if ((this._ShortRatio != value))
				{
					this.OnShortRatioChanging(value);
					this.SendPropertyChanging();
					this._ShortRatio = value;
					this.SendPropertyChanged("ShortRatio");
					this.OnShortRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividentYield", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> DividentYield
		{
			get
			{
				return this._DividentYield;
			}
			set
			{
				if ((this._DividentYield != value))
				{
					this.OnDividentYieldChanging(value);
					this.SendPropertyChanging();
					this._DividentYield = value;
					this.SendPropertyChanged("DividentYield");
					this.OnDividentYieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgVolume", DbType="Int")]
		public System.Nullable<int> AvgVolume
		{
			get
			{
				return this._AvgVolume;
			}
			set
			{
				if ((this._AvgVolume != value))
				{
					this.OnAvgVolumeChanging(value);
					this.SendPropertyChanging();
					this._AvgVolume = value;
					this.SendPropertyChanged("AvgVolume");
					this.OnAvgVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockInformation", Storage="_StockSymbol", ThisKey="Symbol", OtherKey="Symbol", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public StockSymbol StockSymbol
		{
			get
			{
				return this._StockSymbol.Entity;
			}
			set
			{
				StockSymbol previousValue = this._StockSymbol.Entity;
				if (((previousValue != value) 
							|| (this._StockSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockSymbol.Entity = null;
						previousValue.StockInformation = null;
					}
					this._StockSymbol.Entity = value;
					if ((value != null))
					{
						value.StockInformation = this;
						this._Symbol = value.Symbol;
					}
					else
					{
						this._Symbol = default(string);
					}
					this.SendPropertyChanged("StockSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TradingGame_StockPerformance")]
	public partial class TradingGame_StockPerformance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Symbol;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<double> _ThreeMonth;
		
		private System.Nullable<double> _SixMonth;
		
		private System.Nullable<double> _TwelveMonth;
		
		private EntityRef<StockSymbol> _StockSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnThreeMonthChanging(System.Nullable<double> value);
    partial void OnThreeMonthChanged();
    partial void OnSixMonthChanging(System.Nullable<double> value);
    partial void OnSixMonthChanged();
    partial void OnTwelveMonthChanging(System.Nullable<double> value);
    partial void OnTwelveMonthChanged();
    #endregion
		
		public TradingGame_StockPerformance()
		{
			this._StockSymbol = default(EntityRef<StockSymbol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					if (this._StockSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreeMonth", DbType="Float")]
		public System.Nullable<double> ThreeMonth
		{
			get
			{
				return this._ThreeMonth;
			}
			set
			{
				if ((this._ThreeMonth != value))
				{
					this.OnThreeMonthChanging(value);
					this.SendPropertyChanging();
					this._ThreeMonth = value;
					this.SendPropertyChanged("ThreeMonth");
					this.OnThreeMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SixMonth", DbType="Float")]
		public System.Nullable<double> SixMonth
		{
			get
			{
				return this._SixMonth;
			}
			set
			{
				if ((this._SixMonth != value))
				{
					this.OnSixMonthChanging(value);
					this.SendPropertyChanging();
					this._SixMonth = value;
					this.SendPropertyChanged("SixMonth");
					this.OnSixMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwelveMonth", DbType="Float")]
		public System.Nullable<double> TwelveMonth
		{
			get
			{
				return this._TwelveMonth;
			}
			set
			{
				if ((this._TwelveMonth != value))
				{
					this.OnTwelveMonthChanging(value);
					this.SendPropertyChanging();
					this._TwelveMonth = value;
					this.SendPropertyChanged("TwelveMonth");
					this.OnTwelveMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_TradingGame_StockPerformance", Storage="_StockSymbol", ThisKey="Symbol", OtherKey="Symbol", IsForeignKey=true)]
		public StockSymbol StockSymbol
		{
			get
			{
				return this._StockSymbol.Entity;
			}
			set
			{
				StockSymbol previousValue = this._StockSymbol.Entity;
				if (((previousValue != value) 
							|| (this._StockSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockSymbol.Entity = null;
						previousValue.TradingGame_StockPerformances.Remove(this);
					}
					this._StockSymbol.Entity = value;
					if ((value != null))
					{
						value.TradingGame_StockPerformances.Add(this);
						this._Symbol = value.Symbol;
					}
					else
					{
						this._Symbol = default(string);
					}
					this.SendPropertyChanged("StockSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockQuote")]
	public partial class StockQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuoteID;
		
		private string _Symbol;
		
		private System.DateTime _QuoteDate;
		
		private decimal _OpenValue;
		
		private decimal _CloseValue;
		
		private decimal _HighValue;
		
		private decimal _LowValue;
		
		private long _Volume;
		
		private short _TimeFrame;
		
		private System.Nullable<decimal> _MAD50;
		
		private System.Nullable<decimal> _MAD200;
		
		private EntityRef<StockSymbol> _StockSymbol;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuoteIDChanging(int value);
    partial void OnQuoteIDChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnQuoteDateChanging(System.DateTime value);
    partial void OnQuoteDateChanged();
    partial void OnOpenValueChanging(decimal value);
    partial void OnOpenValueChanged();
    partial void OnCloseValueChanging(decimal value);
    partial void OnCloseValueChanged();
    partial void OnHighValueChanging(decimal value);
    partial void OnHighValueChanged();
    partial void OnLowValueChanging(decimal value);
    partial void OnLowValueChanged();
    partial void OnVolumeChanging(long value);
    partial void OnVolumeChanged();
    partial void OnTimeFrameChanging(short value);
    partial void OnTimeFrameChanged();
    partial void OnMAD50Changing(System.Nullable<decimal> value);
    partial void OnMAD50Changed();
    partial void OnMAD200Changing(System.Nullable<decimal> value);
    partial void OnMAD200Changed();
    #endregion
		
		public StockQuote()
		{
			this._StockSymbol = default(EntityRef<StockSymbol>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuoteID
		{
			get
			{
				return this._QuoteID;
			}
			set
			{
				if ((this._QuoteID != value))
				{
					this.OnQuoteIDChanging(value);
					this.SendPropertyChanging();
					this._QuoteID = value;
					this.SendPropertyChanged("QuoteID");
					this.OnQuoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					if (this._StockSymbol.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime QuoteDate
		{
			get
			{
				return this._QuoteDate;
			}
			set
			{
				if ((this._QuoteDate != value))
				{
					this.OnQuoteDateChanging(value);
					this.SendPropertyChanging();
					this._QuoteDate = value;
					this.SendPropertyChanged("QuoteDate");
					this.OnQuoteDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenValue", DbType="Money NOT NULL")]
		public decimal OpenValue
		{
			get
			{
				return this._OpenValue;
			}
			set
			{
				if ((this._OpenValue != value))
				{
					this.OnOpenValueChanging(value);
					this.SendPropertyChanging();
					this._OpenValue = value;
					this.SendPropertyChanged("OpenValue");
					this.OnOpenValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseValue", DbType="Money NOT NULL")]
		public decimal CloseValue
		{
			get
			{
				return this._CloseValue;
			}
			set
			{
				if ((this._CloseValue != value))
				{
					this.OnCloseValueChanging(value);
					this.SendPropertyChanging();
					this._CloseValue = value;
					this.SendPropertyChanged("CloseValue");
					this.OnCloseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighValue", DbType="Money NOT NULL")]
		public decimal HighValue
		{
			get
			{
				return this._HighValue;
			}
			set
			{
				if ((this._HighValue != value))
				{
					this.OnHighValueChanging(value);
					this.SendPropertyChanging();
					this._HighValue = value;
					this.SendPropertyChanged("HighValue");
					this.OnHighValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowValue", DbType="Money NOT NULL")]
		public decimal LowValue
		{
			get
			{
				return this._LowValue;
			}
			set
			{
				if ((this._LowValue != value))
				{
					this.OnLowValueChanging(value);
					this.SendPropertyChanging();
					this._LowValue = value;
					this.SendPropertyChanged("LowValue");
					this.OnLowValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt NOT NULL")]
		public long Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFrame", DbType="SmallInt NOT NULL")]
		public short TimeFrame
		{
			get
			{
				return this._TimeFrame;
			}
			set
			{
				if ((this._TimeFrame != value))
				{
					this.OnTimeFrameChanging(value);
					this.SendPropertyChanging();
					this._TimeFrame = value;
					this.SendPropertyChanged("TimeFrame");
					this.OnTimeFrameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAD50", DbType="Money")]
		public System.Nullable<decimal> MAD50
		{
			get
			{
				return this._MAD50;
			}
			set
			{
				if ((this._MAD50 != value))
				{
					this.OnMAD50Changing(value);
					this.SendPropertyChanging();
					this._MAD50 = value;
					this.SendPropertyChanged("MAD50");
					this.OnMAD50Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAD200", DbType="Money")]
		public System.Nullable<decimal> MAD200
		{
			get
			{
				return this._MAD200;
			}
			set
			{
				if ((this._MAD200 != value))
				{
					this.OnMAD200Changing(value);
					this.SendPropertyChanging();
					this._MAD200 = value;
					this.SendPropertyChanged("MAD200");
					this.OnMAD200Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockSymbol_StockQuote", Storage="_StockSymbol", ThisKey="Symbol", OtherKey="Symbol", IsForeignKey=true)]
		public StockSymbol StockSymbol
		{
			get
			{
				return this._StockSymbol.Entity;
			}
			set
			{
				StockSymbol previousValue = this._StockSymbol.Entity;
				if (((previousValue != value) 
							|| (this._StockSymbol.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockSymbol.Entity = null;
						previousValue.StockQuotes.Remove(this);
					}
					this._StockSymbol.Entity = value;
					if ((value != null))
					{
						value.StockQuotes.Add(this);
						this._Symbol = value.Symbol;
					}
					else
					{
						this._Symbol = default(string);
					}
					this.SendPropertyChanged("StockSymbol");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
